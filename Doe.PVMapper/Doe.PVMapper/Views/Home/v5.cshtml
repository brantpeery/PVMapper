@{
    ViewBag.Title = "v5: Extension Database";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@model IEnumerable<Doe.PVMapper.Models.WebExtension>
<link href="../../theme/default/style.css" rel="stylesheet" type="text/css" />
@section featured {
    <section class="featured">
        <div class="content-wrapper">
            <hgroup class="title">
                <h1>@ViewBag.Title</h1>
                <h2>@ViewBag.Message</h2>
            </hgroup>
        </div>
    </section>
}
<style type="text/css">
    .x-grid3-col-0-0
    {
        background-color: #02E07F;
    }

    .x-grid3-col-0-3
    {
        background-color: #00FF90;
    }

    .x-grid3-col-1-0
    {
        background-color: #01C36F;
    }

    .x-grid3-col-1-3
    {
        background-color: #00ff90;
    }

    .x-grid3-col-1-0
    {
        background-color: #00AD61;
    }

    .x-grid3-col-2-1
    {
        background-color: #00D377;
    }

    .x-grid3-col-2-2
    {
        background-color: #00B164;
    }

    .x-grid3-col-2-0
    {
        background-color: #00ff90;
    }

    .x-grid3-col-2-1
    {
        background-color: #00ff90;
    }

    .x-grid3-col-3-0
    {
        background-color: #008E50;
    }

    .x-grid3-col-3-3
    {
        background-color: #039455;
    }

    .x-grid3-col-3-2
    {
        background-color: #00ff90;
    }

    .x-grid3-col-4-1
    {
        background-color: #00ff90;
    }

    .x-grid3-col-4-2
    {
        background-color: #00ff90;
    }

    .x-grid3-col-4-0
    {
        background-color: #00ff90;
    }

    .x-grid3-col-5-0
    {
        background-color: #00ff90;
    }

    .x-grid3-col-5-3
    {
        background-color: #009E59;
    }

    .x-grid3-col-5-2
    {
        background-color: #00ff90;
    }

    .x-grid3-col-6-3
    {
        background-color: #00ff90;
    }

    .x-grid3-col-6-1
    {
        background-color: #009051;
    }

    .x-grid3-col-6-2
    {
        background-color: #00ff90;
    }

    .x-grid3-col-7-3
    {
        background-color: #00B063;
    }

    .x-grid3-col-7-2
    {
        background-color: #00B566;
    }

    .x-grid3-col-7-1
    {
        background-color: #00ff90;
    }

    .x-grid3-col-8-3
    {
        background-color: #00AD61;
    }

    .x-grid3-col-8-2
    {
        background-color: #00BC6A;
    }

    .x-grid3-col-8-0
    {
        background-color: #00AB60;
    }

    .x-grid3-col-9-2
    {
        background-color: #00ff90;
    }

    .x-grid3-col-9-1
    {
        background-color: #00ff90;
    }

    .x-grid3-col-9-0
    {
        background-color: #00B264;
    }

    .x-grid3-col-10-1
    {
        background-color: #00ff90;
    }

    .x-grid3-col-10-2
    {
        background-color: #00B868;
    }

    .x-grid3-col-10-3
    {
        background-color: #00ff90;
    }
</style>
<div class="content">
    <div id="tree-id">
    </div>
    <div id="tbar-id">
    </div>
    <div id="tabs-id">
    </div>
    <div id="map-id">
    </div>
    <div id="view">
    </div>
    <div id="scoreboard-id">
    </div>
</div>
<script defer="defer" type="text/javascript">
    //    OpenLayers.ImgPath = "../img/"

    // the panel variable is declared here for easy debugging
    var panel;

    Ext.onReady(function () {

        // display tooltips for actions
        Ext.QuickTips.init();

        // http://openlayers.org/dev/examples/web-mercator.html
        //900913
        //102113

        var wms = new OpenLayers.Layer.WMS("OpenLayers WMS",
                "http://vmap0.tiles.osgeo.org/wms/vmap0", { layers: 'basic' });

        var solar = new OpenLayers.Layer.WMS(
                "Solar Radiation",
                "http://mapsdb.nrel.gov/jw_router/perezANN_mod/tile",
                {
                    layers: "perezANN_mod",
                    layer_type: "polygon",
                    transparent: "true",
                    format: "image/gif",
                    exceptions: "application/vnd.ogc.se_inimage"
                },
                { isBaseLayer: false }
                );

        // create WMS layer
        var slope = new OpenLayers.Layer.WMS(
                "Slope",
                "http://mapsdb.nrel.gov/jw_router/DNI_slope_3/tile",
                { layers: "DNI_slope_3", format: "image/gif", transparent: "true" ,}
                {
                    isBaseLayer: false,
                    wrapDateLine: true
                }
            );

        panel = new GeoExt.MapPanel({
            renderTo: "map-id",
            height: 500,
            width: "100%",
            layers: [
            //                        new OpenLayers.Layer.WMS(
            //                            "Global Imagery",
            //                            "http://maps.opengeo.org/geowebcache/service/wms",
            //                            { layers: "bluemarble" }
            //                        )
wms, solar, slope
            ],
            center: [-10723197, 4500612],
            zoom: 4,
            map: {
                projection: new OpenLayers.Projection("EPSG:900913"),
                units: "m",
                numZoomLevels: 18,
                maxResolution: 156543.0339,
                maxExtent: new OpenLayers.Bounds(-20037508, -20037508,
                                                 20037508, 20037508.34),
                theme: null
            }
        });

        // create an action that zooms map to max extent (no map control needed)
        var zoom = new Ext.Action({
            text: "Zoom Full",
            handler: function () {
                panel.map.zoomToMaxExtent();
            },
            tooltip: "zoom to full extent"
        });

        // create an action tied to a navigation control
        var navigate = new GeoExt.Action({
            text: "Navigate",
            control: new OpenLayers.Control.Navigation(),
            map: panel.map,
            // button options
            toggleGroup: "group1",  // only one tool can be active in a group
            allowDepress: false,
            pressed: true,
            tooltip: "navigate"
        });

        // create an action tied to a measure control
        var measure = new GeoExt.Action({
            text: "Measure",
            control: new OpenLayers.Control.Measure(OpenLayers.Handler.Path, {
                geodesic: true,
                eventListeners: {
                    measure: function (event) {
                        var win = new Ext.Window({
                            title: "Measure Resuls",
                            modal: true,
                            width: 180,
                            constrain: true,
                            bodyStyle: { padding: 10 },
                            html: event.measure + " " + event.units
                        });
                        win.show();
                    }
                }
            }),
            map: panel.map,
            // button options
            toggleGroup: "group1",  // only one tool can be active in a group
            allowDepress: false,
            tooltip: "measure distance"
        });
        //http://www.codeproject.com/Articles/344078/ASP-NET-WebAPI-Getting-Started-with-MVC4-and-WebAP
        var scoreTest = new Ext.Action({
            text: "Score Slope",
            handler: function () {
                panel.map.zoomTo(9)
                //,
                //               $.post(
                //               "/api/SiteScore",
                //                { score: "High", rank: Math.random(), siteId: "Arizona", ToolDescription: "Zapit1" }
                //                ),
                //                $.post(
                //                "/api/SiteScore",
                //                  { score: "Med", rank: Math.random(), siteId: "Arizona", ToolDescription: "Squishit" }
                //                 ),
                //                $.post(
                //                "/api/SiteScore",
                //                   { score: "5", rank: Math.random(), siteId: "Arizona", ToolDescription: "Scoreit" }
                //                 ),
                //                $.post(
                //                "/api/SiteScore",
                //                 { score: "High", rank: Math.random(), siteId: "Missouri", ToolDescription: "Zapit" }
                //                 ),
                //                $.post(
                //                "/api/SiteScore",
                //                  { score: "Med", rank: Math.random(), siteId: "Missouri", ToolDescription: "Squishit" }
                //                 ),
                //                $.post(
                //                "/api/SiteScore",
                //                   { score: "5", rank: Math.random(), siteId: "Missouri", ToolDescription: "Scoreit" }
                //                 )

                //                $("#addBook").serialize(),
                //                function (value) {
                //                    $("#bookTemplate").tmpl(value).appendTo("#books");
                //                    $("#name").val("");
                //                    $("#price").val("");
                //                },
                //                "json"

                //                jQuery.ajax({
                //                    type: "POST",
                //                    url: 'http://localhost:1919/api/SiteScore',
                //                    dataType: "json",

                //                    success: function (data) {
                //                        alert(data);
                //                    },
                //                    error: function (XMLHttpRequest, textStatus, errorThrown) {
                //                        alert("error");
                //                    }
                //                })
            }
            // tooltip: ""
        });

        var scoreboard = new Ext.Action({
            text: "Add Site",
            handler: function () {

                // create a new attributes store
                store = new GeoExt.data.AttributeStore({
                    url: "data/describe_feature_type.xml"
                });
                store.load();

                // create a grid to display records from the store
                var grid = new Ext.grid.GridPanel({

                    store: store,
                    cm: new Ext.grid.ColumnModel([
                        { id: "name", header: "Name", dataIndex: "name", sortable: true },
                        { id: "type", header: "Type", dataIndex: "type", sortable: true }
                    ]),
                    sm: new Ext.grid.RowSelectionModel({ singleSelect: true }),
                    autoExpandColumn: "name",
                    renderTo: document.body,
                    height: 300,
                    width: 350
                });

                new Ext.Window({
                    title: "GeoExt MapPanel Window",
                    height: 400,
                    width: 600,
                    layout: "fit",
                    maximizable: true,
                    items: [grid]

                }).show();
            }

        });

        // add a toolbar with the above actions as buttons
        var toolbar = new Ext.Toolbar({
            //            renderTo: "tbar-id",
            items: [scoreboard, "-", zoom, "-", navigate, measure, "-", scoreTest]
        });

        var tabs = new Ext.TabPanel({
            //            renderTo: "tabs-id",
            activeTab: 0,
            region: 'center',
            items: [{
                title: 'Map',
                contentEl: 'map-id'
            }, {
                title: 'Scoreboard',
                listeners: { activate: handleScoreboardActivate, single: true },
                contentEl: 'scoreboard-id'

            }]
        });

        var tree = new Ext.tree.TreePanel({
            title: 'Tools',
            //            renderTo: 'tree-id',
            width: 250,
            region: 'west',
            rootVisible: false,
            autoScroll: true,
            loader: new Ext.tree.TreeLoader({
                url: '/api/Tools',
                preloadChildren: true
            }),
            listeners: {
                'click': function (node, ev) {
                    $.getScript(node.attributes.url);
                }
            }
        });

        // set the root node
        var treeRoot = new Ext.tree.AsyncTreeNode({
            draggable: false,
            id: 'allitems'
        });

        tree.setRootNode(treeRoot);

        new Ext.Panel({
            //            title: "GeoExt LegendPanel Demo",
            layout: 'border',
            renderTo: 'view',
            height: 500,
            width: 950,
            tbar: toolbar,
            items: [tree, tabs]
        });

        function handleScoreboardActivate(tab) {

            var SaleRecord = Ext.data.Record.create([
            { name: 'person', type: 'string' },
            { name: 'product', type: 'string' },
            { name: 'city', type: 'string' },
            { name: 'state', type: 'string' },
            { name: 'month', type: 'int' },
            { name: 'quarter', type: 'int' },
            { name: 'quantity', type: 'int' },
            { name: 'value', type: 'int' }
            ]);

            var myStore = new Ext.data.Store({
                url: 'json.txt',
                autoLoad: true,
                reader: new Ext.data.JsonReader({
                    root: 'rows',
                    idProperty: 'id'
                }, SaleRecord)
            });

            var pivotGrid = new Ext.grid.PivotGrid({
                width: 600,
                height: 259,
                renderTo: 'scoreboard-id',
                store: myStore,
                aggregator: 'sum',
                measure: 'quarter',

                leftAxis: [
                   {
                       width: 190,
                       dataIndex: 'product'
                   }
                ],

                topAxis: [
                    {
                        dataIndex: 'city'
                    }
                ]
            });
        }

    });

</script>