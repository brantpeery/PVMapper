@{
    ViewBag.Title = "v3: Using tools in a toolbar";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<link href="../../theme/default/style.css" rel="stylesheet" type="text/css" />
@section featured {
    <section class="featured">
        <div class="content-wrapper">
            <hgroup class="title">
                <h1>@ViewBag.Title.</h1>
                <h2>@ViewBag.Message</h2>
            </hgroup>
        </div>
    </section>
}
<div class="content">
    <div id="tree-id">
    </div>
    <div id="tbar-id">
    </div>
    <div id="tabs-id">
    </div>
    <div id="map-id">
    </div>
    <div id="view">
    </div>
</div>
@*<script src="http://openlayers.org/api/OpenLayers.js"></script>*@
<script defer="defer" type="text/javascript">
    OpenLayers.ImgPath = "../img/"

    // the panel variable is declared here for easy debugging
    var panel;

    Ext.onReady(function () {

        // display tooltips for actions
        Ext.QuickTips.init();

        // http://openlayers.org/dev/examples/web-mercator.html
        //900913
        //102113

        var wms = new OpenLayers.Layer.WMS("OpenLayers WMS",
                "http://vmap0.tiles.osgeo.org/wms/vmap0", { layers: 'basic' });

        var solar = new OpenLayers.Layer.WMS(
                "Solar Radiation",
                "http://mapsdb.nrel.gov/jw_router/perezANN_mod/tile",
                {
                    layers: "perezANN_mod",
                    layer_type: "polygon",
                    transparent: "true",
                    format: "image/gif",
                    exceptions: "application/vnd.ogc.se_inimage"
                },
                { isBaseLayer: false }
                );

        // create WMS layer
        var slope = new OpenLayers.Layer.WMS(
                "Slope",
                "http://mapsdb.nrel.gov/jw_router/DNI_slope_3/tile",
                { layers: "DNI_slope_3", format: "image/gif", transparent: "true" },
                {
                    isBaseLayer: false,
                    wrapDateLine: true
                }
            );


        panel = new GeoExt.MapPanel({
            renderTo: "map-id",
            height: 500,
            width: "100%",
            layers: [
            //                        new OpenLayers.Layer.WMS(
            //                            "Global Imagery",
            //                            "http://maps.opengeo.org/geowebcache/service/wms",
            //                            { layers: "bluemarble" }
            //                        )
wms, solar, slope
                    ],
            center: [-10723197, 4500612],
            zoom: 4,
            map: {
                projection: new OpenLayers.Projection("EPSG:900913"),
                units: "m",
                numZoomLevels: 18,
                maxResolution: 156543.0339,
                maxExtent: new OpenLayers.Bounds(-20037508, -20037508,
                                                 20037508, 20037508.34),
                theme: null
            }
        });



        //        // create feature store, binding it to the vector layer
        //        store = new GeoExt.data.FeatureStore({
        //            layer: vecLayer,
        //            fields: [
        //            { name: 'name', type: 'string' },
        //            { name: 'elevation', type: 'float' }
        //        ],
        //            proxy: new GeoExt.data.ProtocolProxy({
        //                protocol: new OpenLayers.Protocol.HTTP({
        //                    url: "data/summits.json",
        //                    format: new OpenLayers.Format.GeoJSON()
        //                })
        //            }),
        //            autoLoad: true
        //        });

        //       var siteScoreBoard = new Ext.grid.GridPanel({
        //            title: "Site Comparison",
        //            store: store,
        //            cm: new Ext.grid.ColumnModel([
        //                { header: "Name", dataIndex: "name", sortable: true },
        //                { id: "elevation", header: "Title", dataIndex: "title", sortable: true }
        //            ]),
        //            sm: new Ext.grid.RowSelectionModel({ singleSelect: true }),
        //            autoExpandColumn: "title",
        //            renderTo: "capgrid",
        //            height: 300,
        //            width: 350,
        //            floating: true,
        //            x: 10,
        //            y: 0,
        //            bbar: ["->", {
        //                text: "Back to Map",
        //                handler: function () {

        //                }
        //            }]
        //        });

        // create an action that zooms map to max extent (no map control needed)
        var zoom = new Ext.Action({
            text: "Zoom Full",
            handler: function () {
                panel.map.zoomToMaxExtent();
            },
            tooltip: "zoom to full extent"
        });

        var layerTool = new Ext.Action({
            text: "Install LayerSwitcher",
            handler: function () {
                panel.map.addControl(new OpenLayers.Control.LayerSwitcher());
            },
            tooltip: "Install Layer Switcher"
        });

        // create an action tied to a navigation control
        var navigate = new GeoExt.Action({
            text: "Navigate",
            control: new OpenLayers.Control.Navigation(),
            map: panel.map,
            // button options
            toggleGroup: "group1",  // only one tool can be active in a group
            allowDepress: false,
            pressed: true,
            tooltip: "navigate"
        });

        // create an action tied to a measure control
        var measure = new GeoExt.Action({
            text: "Measure",
            control: new OpenLayers.Control.Measure(OpenLayers.Handler.Path, {
                geodesic: true,
                eventListeners: {
                    measure: function (event) {
                        var win = new Ext.Window({
                            title: "Measure Resuls",
                            modal: true,
                            width: 180,
                            constrain: true,
                            bodyStyle: { padding: 10 },
                            html: event.measure + " " + event.units
                        });
                        win.show();
                    }
                }
            }),
            map: panel.map,
            // button options
            toggleGroup: "group1",  // only one tool can be active in a group
            allowDepress: false,
            tooltip: "measure distance"
        });
        //http://www.codeproject.com/Articles/344078/ASP-NET-WebAPI-Getting-Started-with-MVC4-and-WebAP
        var scoreTest = new Ext.Action({
            text: "Score Slope",
            handler: function () {
                panel.map.zoomTo(9)
                // ,
                //                $.post(
                //                "/api/SiteScore", 
                //                 { score: "High", rank: Math.random(), siteId: "Arizona", ToolDescription: "Zapit" }
                //                 ),
                //                $.post(
                //                "/api/SiteScore",
                //                  { score: "Med", rank: Math.random(), siteId: "Arizona", ToolDescription: "Squishit" }
                //                 ),
                //                $.post(
                //                "/api/SiteScore",
                //                   { score: "5", rank: Math.random(), siteId: "Arizona", ToolDescription: "Scoreit" }
                //                 ),
                //                $.post(
                //                "/api/SiteScore",
                //                 { score: "High", rank: Math.random(), siteId: "Missouri", ToolDescription: "Zapit" }
                //                 ),
                //                $.post(
                //                "/api/SiteScore",
                //                  { score: "Med", rank: Math.random(), siteId: "Missouri", ToolDescription: "Squishit" }
                //                 ),
                //                $.post(
                //                "/api/SiteScore",
                //                   { score: "5", rank: Math.random(), siteId: "Missouri", ToolDescription: "Scoreit" }
                //                 )

                //                $("#addBook").serialize(),
                //                function (value) {
                //                    $("#bookTemplate").tmpl(value).appendTo("#books");
                //                    $("#name").val("");
                //                    $("#price").val("");
                //                },
                //                "json"

                //                jQuery.ajax({
                //                    type: "POST",
                //                    url: 'http://localhost:1919/api/SiteScore',
                //                    dataType: "json",

                //                    success: function (data) {
                //                        alert(data);
                //                    },
                //                    error: function (XMLHttpRequest, textStatus, errorThrown) {
                //                        alert("error");
                //                    }
                //                })
            }
            // tooltip: ""
        });

        var scoreboard = new Ext.Action({
            text: "Add Site",
            handler: function () {

                // create a new attributes store
                store = new GeoExt.data.AttributeStore({
                    url: "data/describe_feature_type.xml"
                });
                store.load();

                // create a grid to display records from the store
                var grid = new Ext.grid.GridPanel({

                    store: store,
                    cm: new Ext.grid.ColumnModel([
                        { id: "name", header: "Name", dataIndex: "name", sortable: true },
                        { id: "type", header: "Type", dataIndex: "type", sortable: true }
                    ]),
                    sm: new Ext.grid.RowSelectionModel({ singleSelect: true }),
                    autoExpandColumn: "name",
                    renderTo: document.body,
                    height: 300,
                    width: 350
                });

                new Ext.Window({
                    title: "GeoExt MapPanel Window",
                    height: 400,
                    width: 600,
                    layout: "fit",
                    maximizable: true,
                    items: [grid]

                }).show();
            }

        });

        // add a toolbar with the above actions as buttons
        var toolbar = new Ext.Toolbar({
            //            renderTo: "tbar-id",
            items: [scoreboard, "-", zoom, "-", navigate, measure, "-", layerTool, "-", scoreTest]
        });

        var tabs = new Ext.TabPanel({
            //            renderTo: "tabs-id",
            activeTab: 0,
            region:'center',
            items: [{
                title: 'Map',
                contentEl: 'map-id'
            }, {
                title: 'Scoreboard',
                html: '<div id="docbody"></div>'
            }]
        });

        // http://geoext.org/tutorials/layertree-tutorial.html
        var layerList = new GeoExt.tree.LayerContainer({
            text: 'All Layers',
            layerStore: panel.layers,
            leaf: false,
            expanded: true
        });

        var layerTree = new Ext.tree.TreePanel({
            title: 'Map Layers (User defined Tools)',
//            renderTo: 'tree-id',
            width: 250,
            region: 'west',
            autoScroll: true,
            root: layerList
        });

        new Ext.Panel({
//            title: "GeoExt LegendPanel Demo",
            layout: 'border',
            renderTo: 'view',
            height: 500,
           width: 950,
            tbar: toolbar,
            items: [layerTree, tabs]
        });







        var SaleRecord = Ext.data.Record.create([
        { name: 'person', type: 'string' },
        { name: 'product', type: 'string' },
        { name: 'city', type: 'string' },
        { name: 'state', type: 'string' },
        { name: 'month', type: 'int' },
        { name: 'quarter', type: 'int' },
        { name: 'year', type: 'int' },
        { name: 'quantity', type: 'int' },
        { name: 'value', type: 'int' }
    ]);

        var myStore = new Ext.data.Store({
            url: 'simple.json',
            autoLoad: true,
            reader: new Ext.data.JsonReader({
                root: 'rows',
                idProperty: 'id'
            }, SaleRecord)
        });

        var pivotGrid = new Ext.grid.PivotGrid({
            title: 'PivotGrid example',
            width: 800,
            height: 259,
            renderTo: 'docbody',
            store: myStore,
            aggregator: 'sum',
            measure: 'value',

            viewConfig: {
                title: 'Sales Performance'
            },

            leftAxis: [
            {
                width: 80,
                dataIndex: 'person'
            },
            {
                width: 90,
                dataIndex: 'product'
            }
        ],

            topAxis: [
            {
                dataIndex: 'year'
            },
            {
                dataIndex: 'city'
            }
        ]
        });
    });    
   
</script>
