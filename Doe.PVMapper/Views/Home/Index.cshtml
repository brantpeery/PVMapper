@{
    ViewBag.Title = "v5: Extension Database";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@model IEnumerable<Doe.PVMapper.Models.WebExtension>

<link rel="stylesheet" type="text/css" href="../../Content/ScoreBoardDemo.css" />
<link href="../../theme/default/style.css" rel="stylesheet" type="text/css" />


@section featured {
    <section class="featured">
        <div class="content-wrapper">
            <hgroup class="title">
                <h1>@ViewBag.Title</h1>
                <h2>@ViewBag.Message</h2>
            </hgroup>
        </div>
    </section>
}

<div class="content">
    <div id="tree-id">
    </div>
    <div id="tbar-id">
    </div>
    <div id="tabs-id">
    </div>
    <div id="map-id">
    </div>
    <div id="view">
    </div>
    <div id="scoreboard-id">
    </div>
</div>

@section Scripts {
    <script type="text/javascript">
        //    OpenLayers.ImgPath = "../img/"

        // This is a globally defined object that represents the client-side behaviors available through the PVMapper framework.
        var pvMapper = {
            map: null,
            toolbar: null,
            postScore: function (score, rank, siteId, ToolDescription) {
                $.post(
                        "/api/SiteScore",
                        { score: score, rank: Math.random(), siteId: siteId, ToolDescription: ToolDescription }
                        );
            }
        };

        // This is exposed to allow extensions to interact with the map.
           // The developer needs to be able to add and remove buttons to a toolbar.
     
        Ext.onReady(function () {

            // display tooltips for actions
            Ext.QuickTips.init();

            var panel = new GeoExt.MapPanel({
                renderTo: "map-id",
                height: 500,
                width: "100%",
                //layers: [
                //                wms, solar, slope
                //],
                center: [-10723197, 4500612],
                zoom: 0, //4 would be the default for US coverage if we were using 19 zoom levels instead of the reduced extents.
                map: {
                    projection: new OpenLayers.Projection("EPSG:900913"),
                    units: "m",
                    numZoomLevels: 18,
                    maxResolution: 156543.0339,
                    maxExtent: new OpenLayers.Bounds(-20037508, -20037508,
                                                     20037508, 20037508.34),
                    theme: null
                }
            });

                    
            pvMapper.map = panel.map;
            pvMapper.toolbar = new Ext.Toolbar({
                //            renderTo: "tbar-id",
                //items: []
            });
           
            var tabs = new Ext.TabPanel({
                //            renderTo: "tabs-id",
                activeTab: 0,
                region: 'center',
                items: [{
                    title: 'Map',
                    contentEl: 'map-id'
                }, {
                    title: 'Scoreboard',
                    listeners: { activate: handleScoreboardActivate, single: true },
                    contentEl: 'scoreboard-id'
                }]
            });

            var tree = new Ext.tree.TreePanel({
                title: 'Tools',
                //            renderTo: 'tree-id',
                width: 250,
                region: 'west',
                rootVisible: false,
                autoScroll: true,
                loader: new Ext.tree.TreeLoader({
                    url: '/api/Tools',
                    preloadChildren: true
                }),
                listeners: {
                    'click': function (node, ev) {
                        // todo: add error handling
                        // http://api.jquery.com/jQuery.getScript/
                        $.getScript(node.attributes.url);
                    }
                }
            });

            // set the root node
            var treeRoot = new Ext.tree.AsyncTreeNode({
                draggable: false,
                id: 'allitems'
            });

            tree.setRootNode(treeRoot);

            var rootPanel = new Ext.Panel({
                //            title: "GeoExt LegendPanel Demo",
                layout: 'border',
                renderTo: 'view',
                height: 500,
                width: 950,
                tbar: pvMapper.toolbar,
                items: [tree, tabs]
            });

            function handleScoreboardActivate(tab) {

                var SaleRecord = Ext.data.Record.create([
                { name: 'person', type: 'string' },
                { name: 'product', type: 'string' },
                { name: 'city', type: 'string' },
                { name: 'state', type: 'string' },
                { name: 'month', type: 'int' },
                { name: 'quarter', type: 'int' },
                { name: 'quantity', type: 'int' },
                { name: 'value', type: 'int' }
                ]);

                var myStore = new Ext.data.Store({
                    url: 'json.txt',
                    autoLoad: true,
                    reader: new Ext.data.JsonReader({
                        root: 'rows',
                        idProperty: 'id'
                    }, SaleRecord)
                });

                var pivotGrid = new Ext.grid.PivotGrid({
                    width: 600,
                    height: 259,
                    renderTo: 'scoreboard-id',
                    store: myStore,
                    aggregator: 'sum',
                    measure: 'quarter',

                    leftAxis: [
                       {
                           width: 190,
                           dataIndex: 'product'
                       }
                    ],

                    topAxis: [
                        {
                            dataIndex: 'city'
                        }
                    ]
                });
            }

        });

    </script>
    <script type="text/javascript" src="../../Scripts/ViewScripts/Layers.js"></script>
    <script type="text/javascript" src="../../Scripts/ViewScripts/TestScoreAPI.js"></script>
    <script type="text/javascript" src="../../Scripts/ViewScripts/ZoomFull.js"></script>
    <script type="text/javascript" src="../../Scripts/ViewScripts/MeasureDistance.js"></script>
    <script type="text/javascript" src="../../Scripts/ViewScripts/AddNewSite.js"></script>
}
